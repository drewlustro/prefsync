#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var log = require('verbalize');
var argv = require('minimist')(process.argv.slice(2));
var Promise = require('bluebird');
var _ = require('underscore');
var mkdirp = require('mkdirp');

var userHomeDir = getUserHome();

var config = {
    dataDir: path.join(userHomeDir, '.prefsync'),
    localUserPrefs: path.join(userHomeDir, 'Library/Preferences')
};

var supportedApps = {
    'Atom': {
        'src': ['com.github.atom.plist']
    },
    'iTerm2': {
        'src': ['com.googlecode.iterm2.plist']
    },
    'Divvy': {
        'src': ['com.mizage.Divvy.plist']
    }
};

var selectedApps = supportedApps;


/**
 * Everything in the file should be customized
 */


// Verbalize `runner`
log.runner = 'prefsync';

// Use `-f` or `--file` to specify the source file
var file = argv._[0] || argv.f || argv.file || 'TODO.md';

// Use `-t` or `--task` to specify the text to append
var task = argv._[1] || argv.t || argv.task;


// if (!file) {
//     log.error('Please provide a source file, either as a first argument or with `-s`');
// }

// if (!task) {
//     log.error('No tasks will be appended to "' + file + '" since you didn\'t specify anything.');
// }


/**
 * Application
 */

Promise.promisifyAll(fs);

log.writeln(mkdirp.sync(config.dataDir));

_.each(selectedApps, function(appInfo, appName, list) {
    log.writeln(log.gray('[' + appName + ']') + ' sync starting...');
    var files = appInfo.src;
    if (!_.isArray(files)) files = [files];

    _.each(files, function(file) {
        var readPath = path.normalize(path.join(config.localUserPrefs, file));
        log.writeln(log.gray('[' + appName + ']') + ' read file: "' + log.bold(readPath) + '"');

        var rs = fs.createReadStream(readPath, {
            encoding: 'utf8'
        });

        var writeDir = mkdirp.sync(path.join(config.dataDir, appName));
        var writePath = path.normalize(path.join(config.dataDir, appName, file));

        log.writeln(log.gray('[' + appName + ']') + ' begin write file: "' + log.bold(writePath) + '"');

        var ws = fs.createWriteStream(writePath, {
            encoding: 'utf8'
        });

        // log.writeln(rs);

        try {
            rs.pipe(ws);
            log.success(log.gray('[' + appName + ']') + ' complete!:');
        } catch (e) {
            log.writeln(log.red('Catch Error: ' + e.message), e.stack);
        }

        // rs.then(function(readStream) {
        //     var writePath = path.normalize(path.join(config.dataDir, appName, file));
        //     log.writeln(log.gray('[' + appName + ']') + ' write file: "' + log.bold(writePath) + '"');
        //     return readStream.pipeAsync();
        // })
        // // .then(function(result) {
        // //     log.success(log.gray('[' + appName + ']') + ' result of pipe.');
        // // })
        // .error(function(e) {
        //     log.writeln(log.red('Error: ' + e.message));
        // })
        //     .
        // catch (function(e) {
        //     log.writeln(log.red('Catch Error: ' + e.message), e.stack);
        // });
    });
});


function getUserHome() {
    return process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];
}

// if (!fs.existsSync(file)) {
//     fs.writeFileSync(file, '# Tasks\n\n');
// }

// fs.appendFile(file, ('- [ ] ' + task + '\n'), function(err) {
//     if (err) {
//         throw err;
//     }

//     log.writeln();
//     log.writeln(log.gray('  todo [appended] ') + '\'' + task + '\' to ' + log.bold(file));

//     // If all is well, log a success message.
//     log.success('  ' + log.runner + ' [done]');
// });